package com.app.controller;

import java.io.IOException;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.app.dto.ApiResponse;
import com.app.dto.SignInRequest;
import com.app.dto.SigninResponse;
import com.app.dto.Signup;
import com.app.security.JwtUtils;
import com.app.service.UserService;

@RestController
@RequestMapping("/user")
public class UserSignInSignupController {

	@Autowired
	private UserService userService;

	@Autowired
	private JwtUtils jwtUtils;

	@Autowired
	private AuthenticationManager authMgr;

	@PostMapping("/register")
	public ResponseEntity<?> userSignup(@RequestPart("dto") @Valid Signup dto, @RequestParam("file") MultipartFile file)
			throws IOException {
		System.out.println("in sign up " + dto);
		return ResponseEntity.status(HttpStatus.CREATED).body(userService.userRegistration(dto, file));
	}

//    @CrossOrigin(origins = "http://localhost:5173", allowCredentials = "true")
	@PostMapping("/login")
	public ResponseEntity<?> authenticateUser(@RequestBody @Valid SignInRequest request) {
		UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(request.getEmail(),
				request.getPassword());

		Authentication verifiedToken = authMgr.authenticate(token);
		

		SigninResponse resp = new SigninResponse(jwtUtils.generateJwtToken(verifiedToken), "Successful Auth!!!!");

		return ResponseEntity.status(HttpStatus.CREATED).body(resp);

	}

	@GetMapping("/logout")
	public ApiResponse logout() {

		return new ApiResponse("User has been logged out successfully.");
	}
	
	@GetMapping("/me")
    public ResponseEntity<?> getProfile() {
        return ResponseEntity.ok(userService.getCurrentUserProfile());
    }

    @PostMapping("/reset")
    public ResponseEntity<?> forgotPassword(@RequestBody String email) {
        return ResponseEntity.ok(userService.forgotPassword(email));
    }

    @PostMapping("/reset/{resetToken}")
    public ResponseEntity<?> resetPassword(@PathVariable String resetToken, @RequestBody String newPassword) {
        return ResponseEntity.ok(userService.resetPassword(resetToken, newPassword));
    }

    @PostMapping("/change-password")
    public ResponseEntity<?> changePassword(@RequestBody String newPassword) {
        return ResponseEntity.ok(userService.changePassword(newPassword));
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<?> updateProfile(@PathVariable Long id, @RequestPart("dto") @Valid Signup dto,
                                           @RequestParam("file") MultipartFile file) throws IOException {
        return ResponseEntity.ok(userService.updateUserProfile(id, dto, file));
    }
}
	
	


}
