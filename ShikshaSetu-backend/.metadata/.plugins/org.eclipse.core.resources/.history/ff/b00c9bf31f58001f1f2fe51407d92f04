package com.app.service;

import java.util.Map;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.app.custom_exceptions.ApiException;
import com.app.dto.CourseDTO;
import com.app.entities.Course;
import com.app.entities.Thumbnail;
import com.app.repository.CourseRepository;
import com.cloudinary.utils.ObjectUtils;

import io.jsonwebtoken.io.IOException;


@Service
@Transactional
public class CourseServiceImpl implements CourseService {

	@Autowired
    private CourseRepository courseRepository;

    @Autowired
    private CloudinaryService cloudinaryService;
    
    @Autowired
    private ModelMapper mapper;
    
	@Override
	public CourseDTO createCourse(CourseDTO reqDTO, MultipartFile file) throws IOException {
        // Check if a course with the same title already exists
//        if (courseRepository.existsByTitle(reqDTO.getTitle())) {
//            throw new ApiException("Course title already exists!");
//        }

        // Map the DTO to the Course entity
        Course course = mapper.map(reqDTO, Course.class);

        // Handle image upload
        if (file != null && !file.isEmpty()) {
            try {
				Map<?, ?> uploadResult = cloudinaryService.uploader().upload(file.getBytes(), ObjectUtils.emptyMap());
				String publicId = uploadResult.get("public_id").toString();
				String secureUrl = uploadResult.get("secure_url").toString();
//                String publicId = uploadResult.get("public_id");
//                String secureUrl = uploadResult.get("secure_url");

                // Create and set the Thumbnail entity
                Thumbnail thumbnail = new Thumbnail();
                thumbnail.setPublicId(publicId);
                thumbnail.setSecureUrl(secureUrl);
                course.setThumbnail(thumbnail); // Set the thumbnail in the course entity
            } catch (IOException e) {
                throw new ApiException("Thumbnail upload failed: " + e.getMessage());
            }
        }

        // Save the course entity to the database and return the saved entity mapped back to DTO
        Course savedCourse = courseRepository.save(course);
        return mapper.map(savedCourse, CourseDTO.class);
	}

}
